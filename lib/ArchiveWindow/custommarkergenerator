import 'dart:typed_data';
import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';

class CustomMarkerGenerator {
  static final CustomMarkerGenerator _instance = CustomMarkerGenerator._internal();
  factory CustomMarkerGenerator() => _instance;
  CustomMarkerGenerator._internal();

  Future<BitmapDescriptor> createMarkerWithText({
    required String baseImagePath = "assets/", // ex: "assets/marker_base.png"
    required String text,
    double textSize = 32,
    Color textColor = Colors.white,
    double imageSize = 150,
  }) async {
    // Load base image (your custom marker background)
    final ByteData byteData = await rootBundle.load(baseImagePath);
    final ui.Codec codec = await ui.instantiateImageCodec(byteData.buffer.asUint8List(),
        targetWidth: imageSize.toInt(), targetHeight: imageSize.toInt());
    final ui.FrameInfo frameInfo = await codec.getNextFrame();
    final ui.Image baseImage = frameInfo.image;

    final ui.PictureRecorder recorder = ui.PictureRecorder();
    final Canvas canvas = Canvas(recorder);

    // Draw base image
    canvas.drawImage(baseImage, Offset.zero, Paint());

    // Draw text
    final textPainter = TextPainter(
      text: TextSpan(
        text: text,
        style: TextStyle(
          fontSize: textSize,
          color: textColor,
          fontWeight: FontWeight.bold,
        ),
      ),
      textAlign: TextAlign.center,
      textDirection: TextDirection.ltr,
    );
    textPainter.layout();

    final offset = Offset(
      (imageSize - textPainter.width) / 2,
      (imageSize - textPainter.height) / 2,
    );
    textPainter.paint(canvas, offset);

    final ui.Image finalImage = await recorder.endRecording().toImage(
          imageSize.toInt(),
          imageSize.toInt(),
        );
    final ByteData? pngBytes = await finalImage.toByteData(format: ui.ImageByteFormat.png);
    final Uint8List data = pngBytes!.buffer.asUint8List();

    return BitmapDescriptor.fromBytes(data);
  }
}